%IMPORTANT VARIABLES



I=imread('Eagle2.png');
imshow(I,[]);
% [xmin ymin width height]
rectangleContenidor=getrect();

ymin = floor(rectangleContenidor(1));
xmin = floor(rectangleContenidor(2));
height = floor(rectangleContenidor(3));
width = floor(rectangleContenidor(4));
resultImage = I;

[nr,nc]= size(I(:,:,1));
numberBlocksY = 100;
numberBlocksX = 100;%1100,700 332
windowSizeY = floor(nr/numberBlocksY);
windowSizeX = floor(nc/numberBlocksX);
stuffY = windowSizeY - mod(nr,windowSizeY);
stuffX = windowSizeX - mod(nc,windowSizeX);
I = padarray(I, [stuffY stuffX], 'replicate','post');
[nr,nc]= size(I(:,:,1));

numberBlocks = nr/windowSizeY * nc/windowSizeX;
trainingDataset = zeros([numberBlocks 7]);
charBackground = 'B';
charObject = 'O';
prediction = charBackground;

cont = 0;
for i=1:windowSizeY:nr
    for j=1:windowSizeX:nc
        
        cont = cont + 1;
        B=I(i:i+windowSizeY-1,j:j+windowSizeX-1,:);

        featureVector=computeFeatures(B);
        trainingDataset(cont,:)=featureVector;

        if blockInsideRectangle([j i windowSizeX windowSizeY],rectangleContenidor,0.8)
            %ojo que el x es la altura
            %I(i:i+windowSizeX-1,j:j+windowSizeY-1,1) = 0;
            prediction = [prediction; charObject];
        else
            %I(i:i+windowSizeX-1,j:j+windowSizeY-1,1) = 255;
            prediction = [prediction; charBackground];
        end
    end
end
prediction = prediction(2:(numberBlocks+1));

%Train model
F1 = fitcecoc(trainingDataset,prediction);
F2 = TreeBagger(100,trainingDataset,prediction);
F3 = fitcknn(trainingDataset,prediction,'NumNeighbors',11);

%colfilt(rectangleImage,[windowSizeX windowSizeY 3],'sliding',@objectRecognition,F3); 
for i=xmin:windowSizeX:xmin+width
    for j=ymin:windowSizeY:ymin+height
        blockPrediction = zeros([1 5]);
        B=I(i:i+windowSizeX-1,j:j+windowSizeY-1,:);
        
        colourMean = blockMean(B);
        blockPrediction(1) = colourMean(1);
        blockPrediction(2) = colourMean(2);
        blockPrediction(3) = colourMean(3);
        
        contrast = blockContrast(B);
        blockPrediction(4) = contrast;
        
        correlation = blockCorrelation(B);
        if isnan(correlation)
            blockPrediction(5) = 0;
        else 
            blockPrediction(5) = correlation;
        end
        [test_prediction,score] = predict(F2,blockPrediction);
        if test_prediction{1}=='B'
            %ojo que el x es la altura
            resultImage(i:i+windowSizeX-1,j:j+windowSizeY-1,:) = 0;
        end
    end
end

imshow(resultImage,[]);

